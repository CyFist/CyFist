<!DOCTYPE html>
<html>
	<head>
		<title>Flight/Weather Radar</title>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link rel="shortcut icon" type="image/x-icon" href="docs/images/favicon.ico" />
		<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==" crossorigin="" />
		<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>
		<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous">
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
		<script type="module" src="https://github.com/abdulk1/Leaflet.RotatedMarker/blob/main/src/rotatedMarker.js"></script>
		<style>
			html,
			body {
				height: 100%;
				margin: 0;
			}

			#map {
				width: 100%;
				height: 500px;
			}

			.aircraft-icon {
				transform-origin: center;
			}

			.leaflet.control {
				border: 2px solid rgba(255, 255, 255, 0.9);
			}
            
			/* Customise Zoom Controls */
			
            .leaflet-touch .leaflet-control-zoom {
                border: 3px solid rgba(255, 255, 255, 0.5) !important;
            }
			
			.leaflet-control-zoom {
            	box-shadow: none;
            	border-radius: 4px;
            	background: rgba(0, 0, 0, 0.5) !important;
            	}
            
			.leaflet-control-zoom a {
				color: white !important;
				background: none !important;
            	border: none !important;
				transition: all 0.5s ease;
				text-align: center;
				margin:-1px, 0px, -1px, 0px;
			}
			
            .leaflet-control-zoom a:hover {
                border-bottom: none !important;
            	display: block;
            	text-align: center;
            	text-decoration: none;
            	color: lightgreen !important;
				background: rgba(0, 0, 0, 0.5) !important;
		        
            	}

			/* Leaflet Layers Control */
			
			.leaflet-touch .leaflet-control-layers {
                border: 3px solid rgba(255, 255, 255, 0.5) !important;
                color: white;
                background-clip: padding-box;
            }
			
			.leaflet-control-layers {
				background: rgba(0, 0, 0, 0.5) !important;
			}


			.leaflet-control-layers-base {

			}

			.leaflet-control-layers-expanded {
				width: 100px !important;
				background: rgba(0, 0, 0, 0.5) !important;
				background-clip: padding-box;
			}
            
			.leaflet-control-layers-separator {
				border-top: 1px solid rgba(255, 255, 255, 0.5) !important;
				margin: 5px -5px 5px -5px;
			}
            
            div > input[type=checkbox],div > input[type=radio],div > input[type=checkbox]:checked,div > input[type=radio]:checked {
			    -webkit-appearance: none;
			    height: 19px !important;
				width: 19px !important;
				background: none !important;
				border: 2px solid rgba(255, 255, 255, 0.5) !important;
				transition-duration: 0.3s;
			}
			
			div > input[type=checkbox]:checked,div > input[type=radio]:checked {
			    content: url("https://cliply.co/wp-content/uploads/2021/03/372103861_CHECK_MARK_ALT_400px.gif");
			    background: lightgreen !important;
			}

            div > input[type=checkbox]:hover,div > input[type=radio]:hover {
				border: 1px solid rgba(0, 0, 0, 1) !important;
			}
			
			div > input[type=checkbox]:hover,div > input[type=radio]:hover {
				border: 1px solid rgba(0, 0, 0, 1) !important;
			}

			/* Leaflet Scale Control */
			.leaflet-control-scale {
				background: rgba(0, 0, 0, 0.9) !important;
			}

			.leaflet-control-scale-line {
				color: lightgreen;
				border: 2px solid rgba(255, 255, 255, 0.5);
				border-top: none;
				transition: 0.5s;
			}

			.leaflet-radar {
				/* from leaflet-control-layers */
				border-radius: 5px;
				background: rgba(0, 0, 0, 0.5) !important;
				border: 3px solid rgba(255, 255, 255, 0.5);
				background-clip: padding-box;
				padding: 5px 8px 0px 8px;
				height: 100%;
				width: 100px;
			}

			.leaflet-radar .timestamp {
				text-align: center;
				color: white;
				display: block;
			}

			.leaflet-radar-button {
				text-align: centre;
				background: none !important;
				border: 2px solid rgba(255, 255, 255, 0.5);
				border-radius: 5px;
				margin: 2px;
				color: rgba(255, 255, 255, 0.5);
				padding: 2px;
				text-decoration: none;
				width: 50px;
				transition: 0.3s;
			}
			
			.leaflet-radar-button:hover {
				border: 2px solid lightgreen;
				color: lightgreen;
			}

			.leaflet-radar-slider {
				width: 100%;
				height: 15px;
				-webkit-appearance: none;
				background: rgba(0, 0, 0, 0.4);
				outline: none;
				border-radius: 15px;
				border: none;
				overflow: hidden;
				box-shadow: none;
			}

			.leaflet-radar-slider::-webkit-slider-thumb {
				-webkit-appearance: none;
				width: 15px;
				height: 15px;
				border-radius: 50%;
				background: rgba(255, 255, 255, 0.5);
				cursor: pointer;
				border: 2px solid rgba(255, 255, 255, 0.9);
				box-shadow: -207px 0 0 200px rgba(255, 255, 255, 0.5);
				transition-duration:0.5s;
			}
			
			.leaflet-radar-slider::-webkit-slider-thumb:hover {
				-webkit-appearance: none;
				border: 7px solid lightgreen;
			}
			
		</style>
	</head>
	<body>
		<div id='map'></div>
		<script>
			L.Control.radar = L.Control.extend({
				position: 'topright',
				onAdd: function(map) {
					var el = L.DomUtil.create(`div`, "leaflet-radar");
					L.DomEvent.disableClickPropagation(el);
					L.DomEvent.on(el, `control_container`, function(e) {
						L.DomEvent.stopPropagation(e);
					});
					L.DomEvent.disableScrollPropagation(el);
					// add control elements within container
					el.innerHTML = ' <div id = "leaflet-radar-timestamp" class = "timestamp" style = "text-align:center"> </div>' +
					' <input id = "myslider" type = "range" class="leaflet-radar-slider"oninput = "stop(); showFrame(this.value); return;" value = "&lt;" /> ' +
					' <input id = "leaflet-radar-button" type = "button" class = "leaflet-radar-button" onclick = "playStop();" value = "Loop" /> ';
					return el;
				},
				onRemove: function(map) {
					// Nothing to do here
				}
			});
			L.control.radar = function(opts) {
				return new L.Control.radar(opts);
			}
		</script>
		<script>
			var aircraftLayer = L.layerGroup();
			var weather = L.layerGroup();
			var mbAttr = '&copy;  <a href = "https://www.openstreetmap.org/copyright">OpenStreetMap</a> ',
				mbUrl = 'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';
			var grayscale = L.tileLayer(mbUrl, {
					id: 'mapbox/light-v9',
					tileSize: 512,
					zoomOffset: -1,
					attribution: mbAttr
				}),
				darkmap = L.tileLayer(mbUrl, {
					id: 'mapbox/dark-v10',
					tileSize: 512,
					zoomOffset: -1,
					attribution: mbAttr
				}),
				streets = L.tileLayer(mbUrl, {
					id: 'mapbox/streets-v11',
					tileSize: 512,
					zoomOffset: -1,
					attribution: mbAttr
				}),
				openaip = L.tileLayer('http://{s}.tile.maps.openaip.net/geowebcache/service/tms/1.0.0/openaip_basemap@EPSG%3A900913@png/{z}/{x}/{y}.{ext}', {
					attribution: '<a href="https://www.openaip.net/">openAIP</a>',
					ext: 'png',
					minZoom: 4,
					maxZoom: 14,
					tms: true,
					detectRetina: true,
					subdomains: '12'
				});
			var map = L.map('map', {
				center: [-31.6691429752277, 116.014641735941],
				zoom: 10,
				layers: [grayscale, openaip, aircraftLayer, weather]
			});
			var baseLayers = {
				"Dark Map": darkmap,
				"Light Map": grayscale,
				"Streets": streets
			};
			var overlays = {
				"AirSpace": openaip,
				"Air Activities": aircraftLayer,
				"Weather": weather
			};
			L.control.layers(baseLayers, overlays).addTo(map);
			var WxCtrl;
			Wxctrl = L.control.radar().addTo(map);
			L.control.scale({
				metric: false
			}).addTo(map)
			map.on('overlayadd', function(eo) {
				if (eo.name === 'Weather') {
					Wxctrl = L.control.radar({}).addTo(map);
					document.getElementById("leaflet-radar-timestamp").innerHTML = timeString;
					document.getElementById("myslider").value = animationPosition;
					document.getElementById("leaflet-radar-button").value = 'Loop';
				}
			});
			map.on('overlayremove', function(eo) {
				if (eo.name === 'Weather') {
					map.removeControl(Wxctrl);
				}
			});

			// Plot Aircraft
			const apiURL = "https://opensky-network.org/api/"
			const endpoint = "states/all"
			const params = "lamin=-32.5468&lomin=114.6093&lamax=-30.1451&lomax=116.7187"
			const api_url = apiURL + endpoint + "?" + params;
			async function update_position() {
				$(document).ready(function() {
					$.get(api_url, function(data, status) {
						aircraftLayer.clearLayers()
						var states = (data.states);
						for (var i in states) {
							var state = states[i];
							var icao24 = state[0],
								callsign = state[1],
								origincountry = state[2],
								timeposition = state[3],
								lastcontact = state[4],
								longitude = state[5],
								latitude = state[6],
								baroaltitude = state[7],
								onground = state[8],
								velocity = state[9],
								truetrack = state[10],
								verticalrate = state[11],
								sensors = state[12],
								geoaltitude = state[13],
								squawk = state[14],
								spi = state[15],
								positionsource = state[16];
							var latlng = L.latLng(state[6], state[5])

							var iconOptions = {
								iconUrl: '<i class="fas fa-plane fa-2x"></i>',
								iconSize: [50, 50]
							}

							// Creating a custom icon
							var myIcon = L.divIcon({
								className: 'aircraft-icon',
								html: '<i class="fas fa-plane fa-2x" style="transform:rotate(calc(-90deg + ' + truetrack + 'deg));"></i>'
							});

							marker = L.marker(latlng, {
								title: callsign,
								riseOnHover: true,
								icon: myIcon
							}).bindPopup(callsign).openPopup().addTo(aircraftLayer);

							setTimeout(update_position, 500);
						}
					})
				});
			}

			update_position();

			/**
			 * RainViewer radar animation part
			 * @type {number[]}
			 */
			var apiData = {};
			var mapFrames = [];
			var lastPastFramePosition = -1;
			var radarLayers = [];
			var optionTileSize = 256; // can be 256 or 512.
			var optionColorScheme = 7; // from 0 to 8. Check the https://rainviewer.com/api/color-schemes.html for additional information
			var optionSmoothData = 1; // 0 - not smooth, 1 - smooth
			var optionSnowColors = 0; // 0 - do not show snow colors, 1 - show snow colors
			var animationPosition = 0;
			var animationTimer = false;
			/**
			 * Load all the available maps frames from RainViewer AP
			 */
			var apiRequest = new XMLHttpRequest();

			async function update_Weather() {
				apiRequest.open("GET", "https://api.rainviewer.com/public/weather-maps.json", true);
				apiRequest.onload = function(e) {
					// store the API response for re-use purposes in memory
					apiData = JSON.parse(apiRequest.response);
					initialize(apiData);
				};
				apiRequest.send();
				setTimeout(update_Weather, 60000)
			}
			update_Weather();
			/**
			 * Initialize internal data from the API response and options
			 */
			function initialize(api) {
				// remove all already added tiled layers
				weather.clearLayers();
				mapFrames = [];
				radarLayers = [];
				animationPosition = 0;
				if (!api) {
					return;
				}
				if (api.radar && api.radar.past) {
					mapFrames = api.radar.past;
					if (api.radar.nowcast) {
						mapFrames = mapFrames.concat(api.radar.nowcast);
					}
					// show the last "past" frame
					lastPastFramePosition = api.radar.past.length - 1;
					showFrame(lastPastFramePosition);
					document.getElementById("myslider").min = 0;
					document.getElementById("myslider").max = mapFrames.length-1;
				}
			}
			/**
			 * Animation functions
			 * @param path - Path to the XYZ tile
			 */
			function addLayer(frame) {
				if (!radarLayers[frame.path]) {
					var colorScheme = optionColorScheme;
					var smooth = optionSmoothData;
					var snow = optionSnowColors;
					radarLayers[frame.path] = new L.TileLayer(apiData.host + frame.path + '/' + optionTileSize + '/{z}/{x}/{y}/' + colorScheme + '/' + smooth + '_' + snow + '.png', {
						tileSize: 256,
						opacity: 0.001,
						zIndex: frame.time
					});
				}
				if (!weather.hasLayer(radarLayers[frame.path])) {
					weather.addLayer(radarLayers[frame.path]);
				}
			}
			/**
			 * Display particular frame of animation for the @position
			 * If preloadOnly parameter is set to true, the frame layer only adds for the tiles preloading purpose
			 * @param position
			 * @param preloadOnly
			 */
			function changeRadarPosition(position, preloadOnly) {
				while (position >= mapFrames.length) {
					position -= mapFrames.length;
				}
				while (position < 0) {
					position += mapFrames.length;
				}
				var currentFrame = mapFrames[animationPosition];
				var nextFrame = mapFrames[position];
				addLayer(nextFrame);
				if (preloadOnly) {
					return;
				}
				animationPosition = position;
				if (radarLayers[currentFrame.path]) {
					radarLayers[currentFrame.path].setOpacity(0);
				}
				radarLayers[nextFrame.path].setOpacity(0.575);
				var plusminus = nextFrame.time > Date.now() / 1000 ? '+' : '-';
				dateObj = new Date(nextFrame.time * 1000);
				hours = dateObj.getHours();
				minutes = dateObj.getMinutes();

				timeString = hours.toString().padStart(2, '0') +
					minutes.toString().padStart(2, '0') +
					'H (' + plusminus + Math.floor(Math.abs(dateObj - Date.now()) / 60000) + 'min)';
				document.getElementById("leaflet-radar-timestamp").innerHTML = timeString;
				document.getElementById("myslider").value = position
			}
			/**
			 * Check avialability and show particular frame position from the timestamps list
			 */
			function showFrame(nextPosition) {
				var preloadingDirection = nextPosition - animationPosition > 0 ? 1 : -1;
				changeRadarPosition(nextPosition);
				// preload next next frame (typically, +1 frame)
				// if don't do that, the animation will be blinking at the first loop
				changeRadarPosition(nextPosition + preloadingDirection, true);
			}
			/**
			 * Stop the animation
			 * Check if the animation timeout is set and clear it.
			 */
			function stop() {
				if (animationTimer) {
					clearTimeout(animationTimer);
					animationTimer = false;
					document.getElementById("leaflet-radar-button").value = 'Loop';
					return true;
				}
				return false;
			}

			function play() {
				document.getElementById("leaflet-radar-button").value = 'Stop';
				showFrame(animationPosition + 1)
				// Main animation driver. Run this function every 500 ms
				animationTimer = setTimeout(play, 500);
			}

			function playStop() {
				if (!stop()) {
					play();
				}
			}
			/**
			 * Handle arrow keys for navigation between next \ prev frames
			 */
			document.onkeydown = function(e) {
				e = e || window.event;
				switch (e.which || e.keyCode) {
					case 37: // left
						stop();
						showFrame(animationPosition - 1);
						break;
					case 39: // right
						stop();
						showFrame(animationPosition + 1);
						break;
					default:
						return; // exit this handler for other keys
				}
				e.preventDefault();
				return false;
			}
		</script>

	</body>

</html>
